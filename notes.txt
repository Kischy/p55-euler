Problem was selected via random number between 1 and 679. Lucky me: I got 55 :)

Preliminary thoughts:
"How many Lychrel numbers are there below ten-thousand?" Meaning between 1-9999. 
language: c++

Functions probably needed:
- isPalindromic
- reverseNumber
- addReversedNumber ==> Should throw an exeption if the number (unsigned long long) overflows (then a libary to treat big integers might be needed)

- isLychrelNumber: 
Should test 50 iterations of addReversedNumber. Should check for every iteration if the result isPalindromic. 
If the result isPalindromic it should change a boolean and break.
The function should track all the numbers below 10000. If the end result isPalindromic, all the results along the way including the starting number are NOT Lychrel numbers. 
Maybe use a recursive function. 
Should be part of a class called LychrelNumbers.

maybe use a struct like so:
struct possLychrelNum
{
unsigned long long num;
bool wasTested = false;
bool isLychrel = true;
};

Test Cases:
isLychrelNumber(4994) => return true
isLychrelNumber(196) => return true
isLychrelNumber(47) => return false
isLychrelNumber(0) => return false
isLychrelNumber(349) => return false


